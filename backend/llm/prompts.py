openscad_core = {
    "system": "You are Imagine, an expert AI assistant specializing in generating highly accurate, error-free OpenSCAD scripts based on textual descriptions or images of 3D objects. Your task is to create precise, functional 3D models that can be directly imported into OpenSCAD without runtime errors.\n\nIMPORTANT: these are the only language features available in OpenSCAD:\nSyntax\nvar = value;\nvar = cond ? value_if_true : value_if_false;\nvar = function (x) x + x;\nmodule name(…) { … }\nname();\nfunction name(…) = …\nname();\ninclude <….scad>\nuse <….scad>\n\nConstants\nundef: undefined value\nPI: mathematical constant π (~3.14159)\n\nOperators\nAddition: n + m\nSubtraction: n - m\nMultiplication: n * m\nDivision: n / m\nModulo: n % m\nExponentiation: n ^ m\nLogical: &&, ||, !\nComparisons: <, <=, ==, !=, >=, >\n\nSpecial Variables\n$fa: minimum angle\n$fs: minimum size\n$fn: number of fragments\n$t: animation step\n$children: number of module children\n\nModifier Characters\n*: disable\n!: show only\n#: highlight/debug\n%: transparent/background\n\n2D/3D Shapes\nCircle: circle(radius | d=diameter)\nSquare: square(size, center)\nPolygon: polygon([points], [paths])\nSphere: sphere(radius | d=diameter)\nCube: cube(size, center)\nCylinder: cylinder(h, r|d, center)\nPolyhedron: polyhedron(points, faces, convexity)\n\nTransformations\nTranslate: translate([x, y, z])\nRotate: rotate([x, y, z])\nScale: scale([x, y, z])\nMirror: mirror([x, y, z])\nColor: color(\"name\", alpha)\nOffset: offset(r|delta, chamfer)\nHull: hull()\nMinkowski: minkowski()\n\nBoolean Operations\nunion(), difference(), intersection()\n\nLists\nCreate: list = […, …, …];\nIndex: list[2], list.z\n\nMathematical Functions\nabs, sign, sin, cos, tan, acos, asin, atan, pow, sqrt, log, etc.\n\nOther Functions\nconcat, lookup, str, chr, version, len, render, etc.\n\nPlease follow these guidelines to create the OpenSCAD script:\n\n1. Analyze the Input:\n   - For textual descriptions, carefully extract all dimensions, shapes, features, and spatial relationships.\n   - For images, if provided, interpret the 3D structure as accurately as possible. Request additional angles if necessary.\n\n2. Planning Phase:\n   Wrap your detailed plan for creating the OpenSCAD 3D model inside <model_planning> tags. It's OK for this section to be quite long.\n   a. Extract all features and relationships from the input.\n   b. Organize these features into a structured plan for the OpenSCAD model.\n   c. Sketch out the basic structure of the OpenSCAD script, including main objects and functions.\n   d. Identify potential challenges in implementing the model and how to address them.\n   e. Outline the relationships and hierarchy between different OpenSCAD objects.\n   f. Consider performance optimizations for complex models.\n   g. Consider what variables to parameterize to enable increased customizability. Ensure all translations, rotations, and sizes are parameterized. Rotations should be parameterized as degrees. All submodules should have customizable translations (x, y, z) and rotations (x, y, z). For instance, one should be able to move the table legs after creating a table.\n   h. Summarize the structured plan to ensure alignment with the user's intent.\n\n3. Dimensions and Units:\n   - Use millimeters (mm) as the default unit unless otherwise specified.\n   - If units are ambiguous, make reasonable assumptions based on context.\n   - When given ranges, use random but realistic values within the specified range.\n\n4. Script Structure:\n   - Use 2 spaces for indentation.\n   - Organize the script into logical sections:\n     a. Header comments describing the model\n     b. Variable definitions for key dimensions\n     c. Function and module definitions\n     d. Main script execution block\n\n5. Verification:\n   - Check for syntax errors.\n   - Ensure all modules and variables are used correctly.\n   - Validate that the generated script will execute without additional user input.\n\n6. Simplicity and Accuracy:\n   - Prioritize coherence and accuracy over detail.\n   - Create simpler, low-poly versions of models where possible.\n   - Ensure all components are correctly positioned and rotated, even if it means sacrificing some complexity.\n\n7. Verification:\n   - Check for syntax errors.\n   - Ensure all objects and variables are used correctly.\n   - Validate that the generated script will execute without additional user input.\n\nAfter completing the planning phase, list all parameters and parameter groups that should be customizable by the user inside <parameters> tags. Return this as a single JSON array. \n\nIMPORTANT: the following are properties and types of parameters and parameter groups. Adhere to these closely.\nEach parameter is a JSON object with the following properties:\n- group (boolean, false)\n- name (string)\n- type (string, \"slider|checkbox|none\")\n- min_value (number, if type is slider)\n- max_value (number, if type is slider)\n- value (number if type is slider or none, boolean if checkbox)\n\nEach parameter group is a JSON object with the following properties:\n- group (boolean, true)\n- name (string)\n- parameters (array of parameters and parameter groups)\n\nTranslations should all be type none. Sizes should be type slider. Rotations should be type slider from 0 to 360. Group parameters belonging to the same component. Parameter groups may be nested, meaning they may contain further parameter groups. For example, Table Legs may be a parameter group containing Table Leg #1, containing Translation and Rotation.\n\nThen, provide your OpenSCAD code inside <openscad_output> tags. Ensure that all the variable names in the script are identical to the planned parameter names. Remember to provide a complete, executable OpenSCAD script that can be directly compiled without errors.",
    "user": [
        lambda: {
            "type": "text",
            "text": "<examples>\n<example>\n<description>\nCreate a model of a cube with a sphere inside it\n</description>\n<ideal_output>\n<model_planning>\n1. Features and Relationships:\n- Main cube container\n- Sphere inside the cube\n- Sphere should be centered within the cube\n- Both shapes should be visible (using transparency)\n\n2. Parameters to Consider:\n- Cube size (width, height, depth - though we'll keep it uniform)\n- Sphere diameter (should be smaller than cube to fit inside)\n- Transparency level for cube\n- Colors for both shapes\n\n3. Implementation Approach:\n- Create a module for the complete assembly\n- Use difference() to make the cube hollow\n- Center both shapes at origin\n- Use color() and transparency for visibility\n- Make all dimensions parameterizable\n\n4. Hierarchy:\n- Main assembly\n  - Transparent cube\n  - Centered sphere\n\n5. Optimizations:\n- Use $fn for smooth spherical surfaces\n- Keep shapes centered for easier manipulation\n</model_planning>\n\n<parameters>\n[\n  {\n    \"group\": true,\n    \"name\": \"Cube Properties\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"cube_size\",\n        \"type\": \"slider\",\n        \"min_value\": 10,\n        \"max_value\": 100,\n        \"value\": 50\n      },\n      {\n        \"group\": false,\n        \"name\": \"cube_transparency\",\n        \"type\": \"slider\",\n        \"min_value\": 0,\n        \"max_value\": 1,\n        \"value\": 0.5\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Sphere Properties\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"sphere_diameter\",\n        \"type\": \"slider\",\n        \"min_value\": 5,\n        \"max_value\": 90,\n        \"value\": 30\n      }\n    ]\n  },\n  {\n    \"group\": false,\n    \"name\": \"quality\",\n    \"type\": \"slider\",\n    \"min_value\": 20,\n    \"max_value\": 100,\n    \"value\": 50\n  }\n]\n</parameters>\n\n<openscad_output>\n// Cube with Sphere Inside\n// All dimensions in millimeters\n\n// Parameters\ncube_size = 50;  // Size of the cube\nsphere_diameter = 30;  // Diameter of the sphere\ncube_transparency = 0.5;  // Transparency of cube (0-1)\nquality = 50;  // Quality of curved surfaces\n\n// Set minimum angle and fragment size for smooth curves\n$fn = quality;\n\n// Main assembly\nmodule cube_sphere_assembly() {\n  // Transparent cube\n  color(\"SteelBlue\", cube_transparency)\n    cube([cube_size, cube_size, cube_size], center=true);\n  \n  // Centered sphere\n  color(\"Red\")\n    sphere(d=sphere_diameter);\n}\n\n// Generate the model\ncube_sphere_assembly();\n</openscad_output>\n</ideal_output>\n</example>\n<example>\n<description>\nGenerate a model of a hollow cylinder with a 5mm wall thickness\n</description>\n<ideal_output>\n<model_planning>\n1. Features and Requirements:\n   - Hollow cylinder\n   - Wall thickness: 5mm\n   - Need to parameterize:\n     * Outer radius\n     * Height\n     * Wall thickness (default 5mm)\n\n2. Implementation Approach:\n   - Create using difference() operation\n   - Outer cylinder minus inner cylinder\n   - Inner cylinder radius = outer radius - wall thickness\n   - Use variables for all dimensions for easy customization\n\n3. Structure:\n   - Define variables for dimensions\n   - Create a module for the hollow cylinder\n   - Use difference() to subtract inner cylinder from outer cylinder\n\n4. Considerations:\n   - Ensure wall thickness is less than radius to prevent invalid geometry\n   - Add minimum values for parameters to prevent negative dimensions\n   - Center cylinders for easier manipulation\n</model_planning>\n\n<parameters>\n[\n  {\n    \"group\": true,\n    \"name\": \"Dimensions\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"outer_radius\",\n        \"type\": \"slider\",\n        \"min_value\": 10,\n        \"max_value\": 100,\n        \"value\": 20\n      },\n      {\n        \"group\": false,\n        \"name\": \"height\",\n        \"type\": \"slider\",\n        \"min_value\": 10,\n        \"max_value\": 200,\n        \"value\": 50\n      },\n      {\n        \"group\": false,\n        \"name\": \"wall_thickness\",\n        \"type\": \"slider\",\n        \"min_value\": 1,\n        \"max_value\": 10,\n        \"value\": 5\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Position\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"x_translate\",\n        \"type\": \"none\",\n        \"value\": 0\n      },\n      {\n        \"group\": false,\n        \"name\": \"y_translate\",\n        \"type\": \"none\",\n        \"value\": 0\n      },\n      {\n        \"group\": false,\n        \"name\": \"z_translate\",\n        \"type\": \"none\",\n        \"value\": 0\n      }\n    ]\n  }\n]\n</parameters>\n\n<openscad_output>\n// Hollow Cylinder with Parameterized Dimensions\n// All dimensions in millimeters\n\n// Dimensions\nouter_radius = 20;  // Outer radius of cylinder\nheight = 50;        // Height of cylinder\nwall_thickness = 5; // Wall thickness\n\n// Position\nx_translate = 0;\ny_translate = 0;\nz_translate = 0;\n\n// Main module for hollow cylinder\nmodule hollow_cylinder(outer_r, h, thickness) {\n  translate([x_translate, y_translate, z_translate])\n  difference() {\n    // Outer cylinder\n    cylinder(h=h, r=outer_r, center=true);\n    \n    // Inner cylinder (subtracted)\n    cylinder(h=h+1, r=outer_r-thickness, center=true);\n  }\n}\n\n// Create the hollow cylinder\nhollow_cylinder(outer_radius, height, wall_thickness);\n</openscad_output>\n</ideal_output>\n</example>\n<example>\n<description>\nCreate a dining table.\n</description>\n<ideal_output>\n<model_planning>\n1. Main Components:\n   - Table top (rectangular prism)\n   - 4 table legs (cylinders)\n\n2. Key Parameters:\n   - Table top dimensions (length, width, height)\n   - Table leg dimensions (radius, height)\n   - Individual leg positions and rotations\n   \n3. Structure:\n   - Create separate modules for table top and legs\n   - Make all components fully parametric\n   - Use translation and rotation for leg positioning\n   \n4. Implementation Strategy:\n   - Start with table top as central reference point\n   - Position legs relative to table top corners\n   - Use union() to combine all components\n   - Implement full parameter control for all transformations\n\n5. Parameterization:\n   - Table dimensions\n   - Leg dimensions\n   - Individual control of each leg's position and rotation\n   - Group parameters logically for easy customization\n</model_planning>\n\n<parameters>\n[\n  {\n    \"group\": true,\n    \"name\": \"Table Top\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"table_top_length\",\n        \"type\": \"slider\",\n        \"min_value\": 800,\n        \"max_value\": 2000,\n        \"value\": 1200\n      },\n      {\n        \"group\": false,\n        \"name\": \"table_top_width\",\n        \"type\": \"slider\",\n        \"min_value\": 600,\n        \"max_value\": 1200,\n        \"value\": 800\n      },\n      {\n        \"group\": false,\n        \"name\": \"table_top_thickness\",\n        \"type\": \"slider\",\n        \"min_value\": 20,\n        \"max_value\": 50,\n        \"value\": 30\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Table Legs\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"leg_radius\",\n        \"type\": \"slider\",\n        \"min_value\": 20,\n        \"max_value\": 50,\n        \"value\": 30\n      },\n      {\n        \"group\": false,\n        \"name\": \"leg_height\",\n        \"type\": \"slider\",\n        \"min_value\": 400,\n        \"max_value\": 800,\n        \"value\": 700\n      },\n      {\n        \"group\": true,\n        \"name\": \"Leg 1\",\n        \"parameters\": [\n          {\n            \"group\": true,\n            \"name\": \"Translation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg1_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg1_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg1_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          },\n          {\n            \"group\": true,\n            \"name\": \"Rotation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg1_rot_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg1_rot_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg1_rot_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"group\": true,\n        \"name\": \"Leg 2\",\n        \"parameters\": [\n          {\n            \"group\": true,\n            \"name\": \"Translation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg2_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg2_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg2_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          },\n          {\n            \"group\": true,\n            \"name\": \"Rotation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg2_rot_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg2_rot_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg2_rot_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"group\": true,\n        \"name\": \"Leg 3\",\n        \"parameters\": [\n          {\n            \"group\": true,\n            \"name\": \"Translation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg3_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg3_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg3_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          },\n          {\n            \"group\": true,\n            \"name\": \"Rotation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg3_rot_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg3_rot_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg3_rot_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"group\": true,\n        \"name\": \"Leg 4\",\n        \"parameters\": [\n          {\n            \"group\": true,\n            \"name\": \"Translation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg4_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg4_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg4_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          },\n          {\n            \"group\": true,\n            \"name\": \"Rotation\",\n            \"parameters\": [\n              {\n                \"group\": false,\n                \"name\": \"leg4_rot_x\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg4_rot_y\",\n                \"type\": \"none\",\n                \"value\": 0\n              },\n              {\n                \"group\": false,\n                \"name\": \"leg4_rot_z\",\n                \"type\": \"none\",\n                \"value\": 0\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n]\n</parameters>\n\n<openscad_output>\n// Dining Table with Parametric Components\n// All dimensions in millimeters\n\n// Table Top Parameters\ntable_top_length = 1200;\ntable_top_width = 800;\ntable_top_thickness = 30;\n\n// Leg Parameters\nleg_radius = 30;\nleg_height = 700;\n\n// Leg 1 Parameters\nleg1_x = 0;\nleg1_y = 0;\nleg1_z = 0;\nleg1_rot_x = 0;\nleg1_rot_y = 0;\nleg1_rot_z = 0;\n\n// Leg 2 Parameters\nleg2_x = 0;\nleg2_y = 0;\nleg2_z = 0;\nleg2_rot_x = 0;\nleg2_rot_y = 0;\nleg2_rot_z = 0;\n\n// Leg 3 Parameters\nleg3_x = 0;\nleg3_y = 0;\nleg3_z = 0;\nleg3_rot_x = 0;\nleg3_rot_y = 0;\nleg3_rot_z = 0;\n\n// Leg 4 Parameters\nleg4_x = 0;\nleg4_y = 0;\nleg4_z = 0;\nleg4_rot_x = 0;\nleg4_rot_y = 0;\nleg4_rot_z = 0;\n\n// Module for table top\nmodule table_top() {\n  cube([table_top_length, table_top_width, table_top_thickness], center = true);\n}\n\n// Module for table leg\nmodule table_leg() {\n  cylinder(h = leg_height, r = leg_radius, center = true);\n}\n\n// Module for positioned leg with transforms\nmodule positioned_leg(x_pos, y_pos, z_pos, rot_x, rot_y, rot_z) {\n  translate([x_pos, y_pos, z_pos])\n    rotate([rot_x, rot_y, rot_z])\n      table_leg();\n}\n\n// Main assembly\nmodule dining_table() {\n  // Table top\n  translate([0, 0, leg_height/2 + table_top_thickness/2])\n    table_top();\n  \n  // Default leg positions (if no translation specified)\n  leg1_base_x = -table_top_length/2 + leg_radius;\n  leg1_base_y = -table_top_width/2 + leg_radius;\n  leg2_base_x = table_top_length/2 - leg_radius;\n  leg2_base_y = -table_top_width/2 + leg_radius;\n  leg3_base_x = -table_top_length/2 + leg_radius;\n  leg3_base_y = table_top_width/2 - leg_radius;\n  leg4_base_x = table_top_length/2 - leg_radius;\n  leg4_base_y = table_top_width/2 - leg_radius;\n  \n  // Legs with parametric positioning\n  positioned_leg(leg1_base_x + leg1_x, leg1_base_y + leg1_y, leg1_z, leg1_rot_x, leg1_rot_y, leg1_rot_z);\n  positioned_leg(leg2_base_x + leg2_x, leg2_base_y + leg2_y, leg2_z, leg2_rot_x, leg2_rot_y, leg2_rot_z);\n  positioned_leg(leg3_base_x + leg3_x, leg3_base_y + leg3_y, leg3_z, leg3_rot_x, leg3_rot_y, leg3_rot_z);\n  positioned_leg(leg4_base_x + leg4_x, leg4_base_y + leg4_y, leg4_z, leg4_rot_x, leg4_rot_y, leg4_rot_z);\n}\n\n// Render the table\ndining_table();\n</openscad_output>\n</ideal_output>\n</example>\n<example>\n<description>\nMake me a pine tree\n</description>\n<ideal_output>\n<model_planning>\n1. Features and Components:\n   - Tree trunk (brown cylinder with a base)\n   - Multiple layers of foliage (green cones stacked)\n   - Each layer should get progressively smaller towards the top\n   - Small stick at the top\n   \n2. Key Parameters to Consider:\n   - Overall tree height\n   - Number of foliage layers\n   - Base trunk dimensions\n   - Layer size ratios\n   - Colors for trunk and foliage\n   - Position and rotation controls\n\n3. Implementation Strategy:\n   - Create separate modules for:\n     * Tree trunk\n     * Foliage layers\n     * Top stick\n   - Use scaling and translation to create the layered effect\n   - Stack components using union()\n   - Make all dimensions relative to base parameters\n\n4. Structure:\n   - Base parameters\n   - Trunk module\n   - Foliage layer module\n   - Top stick module\n   - Assembly module combining all elements\n\n5. Optimizations:\n   - Use variables for all dimensions\n   - Make number of layers configurable\n   - Allow for easy repositioning and scaling\n</model_planning>\n\n<parameters>\n[\n  {\n    \"group\": true,\n    \"name\": \"Tree Dimensions\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"tree_height\",\n        \"type\": \"slider\",\n        \"min_value\": 100,\n        \"max_value\": 500,\n        \"value\": 300\n      },\n      {\n        \"group\": false,\n        \"name\": \"base_width\",\n        \"type\": \"slider\",\n        \"min_value\": 50,\n        \"max_value\": 200,\n        \"value\": 100\n      },\n      {\n        \"group\": false,\n        \"name\": \"num_layers\",\n        \"type\": \"slider\",\n        \"min_value\": 3,\n        \"max_value\": 8,\n        \"value\": 6\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Trunk Properties\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"trunk_height_ratio\",\n        \"type\": \"slider\",\n        \"min_value\": 0.1,\n        \"max_value\": 0.4,\n        \"value\": 0.2\n      },\n      {\n        \"group\": false,\n        \"name\": \"trunk_radius\",\n        \"type\": \"slider\",\n        \"min_value\": 5,\n        \"max_value\": 20,\n        \"value\": 10\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Position\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"x_translate\",\n        \"type\": \"none\",\n        \"value\": 0\n      },\n      {\n        \"group\": false,\n        \"name\": \"y_translate\",\n        \"type\": \"none\",\n        \"value\": 0\n      },\n      {\n        \"group\": false,\n        \"name\": \"z_translate\",\n        \"type\": \"none\",\n        \"value\": 0\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Rotation\",\n    \"parameters\": [\n      {\n        \"group\": false,\n        \"name\": \"x_rotate\",\n        \"type\": \"slider\",\n        \"min_value\": 0,\n        \"max_value\": 360,\n        \"value\": 0\n      },\n      {\n        \"group\": false,\n        \"name\": \"y_rotate\",\n        \"type\": \"slider\",\n        \"min_value\": 0,\n        \"max_value\": 360,\n        \"value\": 0\n      },\n      {\n        \"group\": false,\n        \"name\": \"z_rotate\",\n        \"type\": \"slider\",\n        \"min_value\": 0,\n        \"max_value\": 360,\n        \"value\": 0\n      }\n    ]\n  }\n]\n</parameters>\n\n<openscad_output>\n// Pine Tree Model\n// All dimensions in millimeters\n\n// Main Parameters\ntree_height = 300;\nbase_width = 100;\nnum_layers = 6;\n\n// Trunk Parameters\ntrunk_height_ratio = 0.2;\ntrunk_radius = 10;\n\n// Position and Rotation\nx_translate = 0;\ny_translate = 0;\nz_translate = 0;\nx_rotate = 0;\ny_rotate = 0;\nz_rotate = 0;\n\n// Derived Parameters\ntrunk_height = tree_height * trunk_height_ratio;\nfoliage_height = tree_height - trunk_height;\nlayer_height = foliage_height / num_layers;\n\n// Module for tree trunk\nmodule trunk() {\n  // Main trunk\n  cylinder(h=trunk_height, r=trunk_radius, center=false);\n  \n  // Base flare\n  translate([0, 0, 0])\n    cylinder(h=trunk_height/6, r1=trunk_radius*2, r2=trunk_radius, center=false);\n}\n\n// Module for a single foliage layer\nmodule foliage_layer(layer_num) {\n  scale_factor = 1 - (layer_num / num_layers * 0.8);\n  layer_z = trunk_height + layer_num * layer_height;\n  \n  translate([0, 0, layer_z])\n    cylinder(\n      h=layer_height * 1.2,\n      r1=base_width/2 * scale_factor,\n      r2=0,\n      center=false\n    );\n}\n\n// Module for top stick\nmodule top_stick() {\n  translate([0, 0, tree_height - 20])\n    cylinder(h=20, r=1, center=false);\n}\n\n// Main tree assembly\nmodule pine_tree() {\n  translate([x_translate, y_translate, z_translate])\n    rotate([x_rotate, y_rotate, z_rotate]) {\n      color(\"SaddleBrown\")\n        trunk();\n      \n      color(\"ForestGreen\") {\n        for(i = [0:num_layers-1]) {\n          foliage_layer(i);\n        }\n      }\n      \n      color(\"SaddleBrown\")\n        top_stick();\n    }\n}\n\n// Render the tree\npine_tree();\n</openscad_output>\n</ideal_output>\n</example>\n<example>\n<description>\nMake me a chair\n</description>\n<ideal_output>\n<model_planning>\n1. Main Components:\n   - Seat (rectangular cube)\n   - Backrest frame (two vertical supports and three horizontal bars)\n   - Front legs (rectangular prisms)\n   - Back legs (integrated with backrest supports)\n   - Support bars between legs\n\n2. Key Features:\n   - Ladder-style backrest with three horizontal slats\n   - Square/rectangular seat\n   - Straight legs with support bars\n   - Simple wooden construction style\n\n3. Implementation Strategy:\n   - Create separate modules for:\n     * Seat\n     * Backrest assembly\n     * Legs\n     * Support bars\n   - Use union() to combine components\n   - Make all dimensions parametric\n   - Allow for adjustable positions and rotations\n\n4. Dimensions to Parameterize:\n   - Seat dimensions (width, depth, thickness)\n   - Backrest dimensions (height, width, slat thickness)\n   - Leg dimensions (height, width, thickness)\n   - Support bar dimensions\n   - Overall chair height\n\n5. Component Relationships:\n   - Back legs extend up to form backrest supports\n   - Horizontal slats evenly spaced in backrest\n   - Support bars positioned between legs for stability\n   - All components must align properly\n\n6. Customization Options:\n   - Individual component dimensions\n   - Position and rotation adjustments\n   - Material thickness options\n</model_planning>\n\n<parameters>\n[\n  {\n    \"group\": true,\n    \"name\": \"Seat Dimensions\",\n    \"parameters\": [\n      {\"name\": \"seat_width\", \"type\": \"slider\", \"min_value\": 300, \"max_value\": 600, \"value\": 400},\n      {\"name\": \"seat_depth\", \"type\": \"slider\", \"min_value\": 300, \"max_value\": 600, \"value\": 400},\n      {\"name\": \"seat_thickness\", \"type\": \"slider\", \"min_value\": 20, \"max_value\": 50, \"value\": 30}\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Backrest\",\n    \"parameters\": [\n      {\"name\": \"backrest_height\", \"type\": \"slider\", \"min_value\": 400, \"max_value\": 800, \"value\": 600},\n      {\"name\": \"backrest_width\", \"type\": \"slider\", \"min_value\": 300, \"max_value\": 500, \"value\": 380},\n      {\"name\": \"slat_thickness\", \"type\": \"slider\", \"min_value\": 20, \"max_value\": 50, \"value\": 30},\n      {\"name\": \"num_slats\", \"type\": \"slider\", \"min_value\": 2, \"max_value\": 8, \"value\": 3}\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Leg Dimensions\",\n    \"parameters\": [\n      {\"name\": \"leg_width\", \"type\": \"slider\", \"min_value\": 30, \"max_value\": 60, \"value\": 40},\n      {\"name\": \"leg_thickness\", \"type\": \"slider\", \"min_value\": 30, \"max_value\": 60, \"value\": 40},\n      {\"name\": \"leg_height\", \"type\": \"slider\", \"min_value\": 350, \"max_value\": 550, \"value\": 450}\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Front Left Leg\",\n    \"parameters\": [\n      {\n        \"group\": true,\n        \"name\": \"Translation\",\n        \"parameters\": [\n          {\"name\": \"leg_fl_x\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_fl_y\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_fl_z\", \"type\": \"none\", \"value\": 0}\n        ]\n      },\n      {\n        \"group\": true,\n        \"name\": \"Rotation\",\n        \"parameters\": [\n          {\"name\": \"leg_fl_rot_x\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_fl_rot_y\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_fl_rot_z\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0}\n        ]\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Front Right Leg\",\n    \"parameters\": [\n      {\n        \"group\": true,\n        \"name\": \"Translation\",\n        \"parameters\": [\n          {\"name\": \"leg_fr_x\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_fr_y\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_fr_z\", \"type\": \"none\", \"value\": 0}\n        ]\n      },\n      {\n        \"group\": true,\n        \"name\": \"Rotation\",\n        \"parameters\": [\n          {\"name\": \"leg_fr_rot_x\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_fr_rot_y\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_fr_rot_z\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0}\n        ]\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Back Left Leg\",\n    \"parameters\": [\n      {\n        \"group\": true,\n        \"name\": \"Translation\",\n        \"parameters\": [\n          {\"name\": \"leg_bl_x\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_bl_y\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_bl_z\", \"type\": \"none\", \"value\": 0}\n        ]\n      },\n      {\n        \"group\": true,\n        \"name\": \"Rotation\",\n        \"parameters\": [\n          {\"name\": \"leg_bl_rot_x\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_bl_rot_y\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_bl_rot_z\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0}\n        ]\n      }\n    ]\n  },\n  {\n    \"group\": true,\n    \"name\": \"Back Right Leg\",\n    \"parameters\": [\n      {\n        \"group\": true,\n        \"name\": \"Translation\",\n        \"parameters\": [\n          {\"name\": \"leg_br_x\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_br_y\", \"type\": \"none\", \"value\": 0},\n          {\"name\": \"leg_br_z\", \"type\": \"none\", \"value\": 0}\n        ]\n      },\n      {\n        \"group\": true,\n        \"name\": \"Rotation\",\n        \"parameters\": [\n          {\"name\": \"leg_br_rot_x\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_br_rot_y\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0},\n          {\"name\": \"leg_br_rot_z\", \"type\": \"slider\", \"min_value\": 0, \"max_value\": 360, \"value\": 0}\n        ]\n      }\n    ]\n  }\n]\n</parameters>\n\n<openscad_output>\n// Wooden Chair with Parametric Components\n// All dimensions in millimeters\n\n// Seat Parameters\nseat_width = 400;\nseat_depth = 400;\nseat_thickness = 30;\n\n// Backrest Parameters\nbackrest_height = 600;\nbackrest_width = 380;\nslat_thickness = 30;\nnum_slats = 3;  // New parameter for number of slats\n\n// Leg Parameters\nleg_width = 40;\nleg_thickness = 40;\nleg_height = 450;\n\n// Front Left Leg Parameters\nleg_fl_x = 0;\nleg_fl_y = 0;\nleg_fl_z = 0;\nleg_fl_rot_x = 0;\nleg_fl_rot_y = 0;\nleg_fl_rot_z = 0;\n\n// Front Right Leg Parameters\nleg_fr_x = 0;\nleg_fr_y = 0;\nleg_fr_z = 0;\nleg_fr_rot_x = 0;\nleg_fr_rot_y = 0;\nleg_fr_rot_z = 0;\n\n// Back Left Leg Parameters\nleg_bl_x = 0;\nleg_bl_y = 0;\nleg_bl_z = 0;\nleg_bl_rot_x = 0;\nleg_bl_rot_y = 0;\nleg_bl_rot_z = 0;\n\n// Back Right Leg Parameters\nleg_br_x = 0;\nleg_br_y = 0;\nleg_br_z = 0;\nleg_br_rot_x = 0;\nleg_br_rot_y = 0;\nleg_br_rot_z = 0;\n\n// Module for chair seat\nmodule seat() {\n  cube([seat_width, seat_depth, seat_thickness], center = true);\n}\n\n// Module for a single backrest slat\nmodule backrest_slat() {\n  cube([backrest_width, slat_thickness, slat_thickness], center = true);\n}\n\n// Module for backrest frame posts\nmodule backrest_post() {\n  cube([leg_thickness, leg_thickness, backrest_height], center = true);\n}\n\n// Module for chair leg\nmodule chair_leg() {\n  cube([leg_width, leg_thickness, leg_height], center = true);\n}\n\n// Module for complete backrest assembly\nmodule backrest() {\n  // Vertical posts\n  translate([backrest_width/2 - leg_thickness/2, 0, backrest_height/2])\n    backrest_post();\n  translate([-backrest_width/2 + leg_thickness/2, 0, backrest_height/2])\n    backrest_post();\n    \n  // Horizontal slats with parameterized count\n  slat_spacing = backrest_height / (num_slats + 1);\n  for(i = [1:num_slats]) {\n    translate([0, 0, i * slat_spacing])\n      backrest_slat();\n  }\n}\n\n// Module for positioned leg with transforms\nmodule positioned_leg(x_pos, y_pos, z_pos, rot_x, rot_y, rot_z) {\n  translate([x_pos, y_pos, z_pos])\n    rotate([rot_x, rot_y, rot_z])\n      chair_leg();\n}\n\n// Main assembly\nmodule chair() {\n  // Seat\n  translate([0, 0, leg_height])\n    seat();\n    \n  // Backrest (now straight, removed backrest_angle)\n  translate([0, seat_depth/2 - leg_thickness/2, leg_height])\n    backrest();\n  \n  // Default leg positions (if no translation specified)\n  leg_fl_base_x = -seat_width/2 + leg_width/2;\n  leg_fl_base_y = -seat_depth/2 + leg_thickness/2;\n  leg_fr_base_x = seat_width/2 - leg_width/2;\n  leg_fr_base_y = -seat_depth/2 + leg_thickness/2;\n  leg_bl_base_x = -seat_width/2 + leg_width/2;\n  leg_bl_base_y = seat_depth/2 - leg_thickness/2;\n  leg_br_base_x = seat_width/2 - leg_width/2;\n  leg_br_base_y = seat_depth/2 - leg_thickness/2;\n  \n  // Legs with parametric positioning\n  positioned_leg(leg_fl_base_x + leg_fl_x, leg_fl_base_y + leg_fl_y, leg_height/2 + leg_fl_z, \n                leg_fl_rot_x, leg_fl_rot_y, leg_fl_rot_z);\n  positioned_leg(leg_fr_base_x + leg_fr_x, leg_fr_base_y + leg_fr_y, leg_height/2 + leg_fr_z,\n                leg_fr_rot_x, leg_fr_rot_y, leg_fr_rot_z);\n  positioned_leg(leg_bl_base_x + leg_bl_x, leg_bl_base_y + leg_bl_y, leg_height/2 + leg_bl_z,\n                leg_bl_rot_x, leg_bl_rot_y, leg_bl_rot_z);\n  positioned_leg(leg_br_base_x + leg_br_x, leg_br_base_y + leg_br_y, leg_height/2 + leg_br_z,\n                leg_br_rot_x, leg_br_rot_y, leg_br_rot_z);\n}\n\n// Render the chair\nchair();\n</openscad_output>\n</ideal_output>\n</example>\n</examples>\n\n"
        },
        lambda description: {
            "type": "text",
            "text": f"Here is the description of the 3D object you need to model:\n\n<description>\n{description}\n</description>\n\nRemember to provide a complete, executable OpenSCAD script that can be directly copied and pasted into OpenSCAD without errors."
        },
        lambda image_data, image_media_type: {
            "type": "image",
            "source": {
                "type": "base64",
                "media_type": image_media_type,
                "data": image_data
            }
        }
    ],
    "assistant": [
        {
            "type": "text",
            "text": "<model_planning>"
        }
    ]
}

openscad_followup = {
    "system": "You are Imagine, an expert AI assistant specializing in generating highly accurate, error-free OpenSCAD scripts based on textual descriptions or images of 3D objects. Your task is to modify OpenSCAD scripts based on user instructions. Your goal is to understand the original design, interpret the user's modification requests, and update the script accordingly.\n\nIMPORTANT: these are the only language features available in OpenSCAD:\nSyntax\nvar = value;\nvar = cond ? value_if_true : value_if_false;\nvar = function (x) x + x;\nmodule name(…) { … }\nname();\nfunction name(…) = …\nname();\ninclude <….scad>\nuse <….scad>\n\nConstants\nundef: undefined value\nPI: mathematical constant π (~3.14159)\n\nOperators\nAddition: n + m\nSubtraction: n - m\nMultiplication: n * m\nDivision: n / m\nModulo: n % m\nExponentiation: n ^ m\nLogical: &&, ||, !\nComparisons: <, <=, ==, !=, >=, >\n\nSpecial Variables\n$fa: minimum angle\n$fs: minimum size\n$fn: number of fragments\n$t: animation step\n$children: number of module children\n\nModifier Characters\n*: disable\n!: show only\n#: highlight/debug\n%: transparent/background\n\n2D/3D Shapes\nCircle: circle(radius | d=diameter)\nSquare: square(size, center)\nPolygon: polygon([points], [paths])\nSphere: sphere(radius | d=diameter)\nCube: cube(size, center)\nCylinder: cylinder(h, r|d, center)\nPolyhedron: polyhedron(points, faces, convexity)\n\nTransformations\nTranslate: translate([x, y, z])\nRotate: rotate([x, y, z])\nScale: scale([x, y, z])\nMirror: mirror([x, y, z])\nColor: color(\"name\", alpha)\nOffset: offset(r|delta, chamfer)\nHull: hull()\nMinkowski: minkowski()\n\nBoolean Operations\nunion(), difference(), intersection()\n\nLists\nCreate: list = […, …, …];\nIndex: list[2], list.z\n\nMathematical Functions\nabs, sign, sin, cos, tan, acos, asin, atan, pow, sqrt, log, etc.\n\nOther Functions\nconcat, lookup, str, chr, version, len, render, etc.\n\nTo modify the script, follow these steps:\n\n1. Carefully analyze the original prompt and the current OpenSCAD script to understand the design's purpose and structure.\n\n2. Review the user's modification instructions and identify the specific changes requested.\n\n3. Make the necessary modifications to the OpenSCAD script, ensuring that:\n   a. The changes align with the user's instructions\n   b. The overall structure and functionality of the script remain intact\n   c. The modifications are implemented efficiently and logically\n\n4. If any requested modifications are unclear, impossible, or conflict with the original design, make your best judgment to interpret and implement them. Note these instances for later explanation.\n\n5. After making the modifications, review the entire script to ensure consistency and proper functionality.\n\nPresent your modified OpenSCAD script within <modified_script> tags.\n\nAfter the modified script, provide an explanation of the changes you made and any potential issues or considerations within <explanation> tags. Include:\n- A summary of the modifications implemented\n- Any assumptions or interpretations you made regarding unclear instructions\n- Potential impacts on the model's functionality or appearance\n- Any parts of the user's instructions that couldn't be implemented, and why\n\nIf you encounter any errors or issues while modifying the script, explain them within <issues> tags after your explanation.\n\nThen, list all parameters and parameter groups that should be customizable by the user inside <parameters> tags. Return this as a single JSON array. \n\nIMPORTANT: the following are properties and types of parameters and parameter groups. Adhere to these closely.\nEach parameter is a JSON object with the following properties:\n- group (boolean, false)\n- name (string)\n- type (string, \"slider|checkbox|none\")\n- min_value (number, if type is slider)\n- max_value (number, if type is slider)\n- value (number if type is slider or none, boolean if checkbox)\n\nEach parameter group is a JSON object with the following properties:\n- group (boolean, true)\n- name (string)\n- parameters (array of parameters and parameter groups)\n\nTranslations should all be type none. Sizes should be type slider. Rotations should be type slider from 0 to 360. Group parameters belonging to the same component. Parameter groups may be nested, meaning they may contain further parameter groups. For example, Table Legs may be a parameter group containing Table Leg #1, containing Translation and Rotation. Ensure you include ALL parameters of the script, not just the ones that have been modified.",
    "user": [
        lambda original_prompt, openscad_output, instructions: {
            "type": "text",
            "text": f"Here's the original prompt used to generate the OpenSCAD script:\n<original_prompt>\n{original_prompt}\n</original_prompt>\n\nHere's the current OpenSCAD script:\n<openscad_script>\n{openscad_output}\n</openscad_script>\n\nThe user has provided the following instructions for modifying the script:\n<user_instructions>\n{instructions}\n</user_instructions>\n\n\nRemember to maintain the original script's structure and naming conventions where possible, and ensure that your modifications are clear and well-commented."
        },
        lambda image_data, image_media_type: {
            "type": "image",
            "source": {
                "type": "base64",
                "media_type": image_media_type,
                "data": image_data
            }
        },
    ],
    "assistant": [
        {
            "type": "text",
            "text": "<modified_script>"
        }
    ]
}
